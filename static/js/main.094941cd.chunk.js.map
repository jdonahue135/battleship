{"version":3,"sources":["helpers.js","factories/Gameboard.js","factories/Ship.js","factories/Player.js","constants.js","componenets/GridSpace.js","componenets/Board.js","componenets/Ship.js","componenets/Game.js","serviceWorker.js","index.js"],"names":["populateGameboard","gameboard","ships","getShips","i","length","name","getName","orientation","Math","random","index","floor","placeShip","sinkAllShips","receiveAttack","coordinatesToIndex","coordinates","charAt","toUpperCase","charCodeAt","Number","slice","indexToCoordinates","String","fromCharCode","getComputerPlay","formatShipName","replace","toLowerCase","require","Ship","module","exports","grid","n","gridItem","hitStatus","shipName","shipIndex","push","getGridItem","find","item","gridSpace","space","theShip","ship","hit","isSunk","console","log","firstIndex","err","shipCoordinates","coordinateIndex","getLength","theCoordinate","increment","currentIndex","theItem","place","areAllSunk","getGrid","allShipsOnBoard","getPlacedStatus","onBoard","shipSpace","getShip","hitSpaces","forEach","attack","ItemTypes","GridSpace","props","clickSetting","onClick","className","useDrop","accept","drop","onDrop","collect","mon","isOver","ref","key","id","Board","containerId","board","map","useDrag","type","monitor","isDragging","drag","shipSpaces","classlist","onMouseOver","style","opacity","Gameboard","Player","Game","state","playerGameboard","computerGameboard","activePlayer","gameStatus","shipOrientation","hoverSpaces","players","this","playTurn","setState","attackedGridItem","undefined","addClass","checkForWinner","e","target","parentID","document","querySelector","childNodes","classList","add","firstSpaceIndex","handleDrag","bind","window","location","reload","fn","message","hiddenClassName","resetGame","setUpGame","DndProvider","backend","Backend","renderShip","handleDrop","handleAttack","handleFlip","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4IAAA,+SAAMA,EAAoB,SAACC,GAEzB,IADA,IAAMC,EAAQD,EAAUE,WACfC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACrC,IAAME,EAAOJ,EAAME,GAAGG,UAChBC,EAAcC,KAAKC,SAAW,GAAM,aAAe,WACnDC,EAAQF,KAAKG,MAAsB,IAAhBH,KAAKC,WAEf,IADAT,EAAUY,UAAUP,EAAME,EAAaG,IAEpDP,MAKAU,EAAe,SAACb,GACpBA,EAAUc,cAAc,GACxBd,EAAUc,cAAc,GACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,IACxBd,EAAUc,cAAc,KAGpBC,EAAqB,SAACC,GAI1B,OAFkD,IADnCA,EAAYC,OAAO,GAAGC,cACTC,WAAW,GAAK,IAC7BC,OAAOJ,EAAYK,MAAM,IACV,GAG1BC,EAAqB,SAACZ,GAG1B,OAFea,OAAOC,aAAahB,KAAKG,MAAMD,EAAQ,IAAM,KAC5CA,EAAQ,GAAM,IAI1Be,EAAkB,WACtB,OAAOjB,KAAKG,MAAsB,IAAhBH,KAAKC,WAGnBiB,EAAiB,SAACrB,GAEtB,OAAOA,EAAKsB,QAAQ,IAAK,KAAKC,gB,8CCpDmBC,EAAQ,GAAnDP,E,EAAAA,mBAAoBP,E,EAAAA,mBAEtBe,EAAOD,EAAQ,IA6JrBE,EAAOC,QA3JW,WAgBhB,IAfA,IAAIC,EAAO,GAGLhC,EAAQ,CACZ6B,EAAK,WACLA,EAAK,cACLA,EAAK,aACLA,EAAK,aACLA,EAAK,gBAMHpB,EAAQ,EACHP,EAAI,GAAIA,EAAI,GAAIA,IAEvB,IAAK,IAAI+B,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,IAAIC,EAAW,CAEbzB,MAAOA,EACPM,YAAaO,OAAOC,aAAarB,GAAK+B,EACtCE,WAAW,EACXC,SAAU,KACVC,UAAW,MAEbL,EAAKM,KAAKJ,GACVzB,IAIJ,IAwGM8B,EAAc,SAAC9B,GAEnB,OADiBuB,EAAKQ,MAAK,SAACC,GAAD,OAAUA,EAAKhC,QAAUA,MAMtD,MAAO,CACLI,cAnDoB,SAACJ,GACrB,IAAIiC,EAAYV,EAAKQ,MAAK,SAACG,GAAD,OAAWA,EAAMlC,QAAUU,OAAOV,MAC5D,IAA4B,IAAxBiC,EAAUP,UACZ,OAAO,EAIP,GAFAO,EAAUP,WAAY,EAEM,OAAxBO,EAAUL,UAAoB,CAEhC,IAAIO,EAAU5C,EAAMwC,MAClB,SAACK,GAAD,OAAUH,EAAUN,WAAaS,EAAKxC,aAExCuC,EAAQE,IAAIJ,EAAUL,YAGG,IAArBO,EAAQG,UACVC,QAAQC,IAAI,eAAiBL,EAAQvC,WAIzC,OAAOqC,GAgCT/B,UAjHgB,SAACyB,EAAU9B,EAAa4C,GAOxC,IALA,IAaIC,EAbEN,EAAO7C,EAAMwC,MAAK,SAACK,GAAD,OAAUA,EAAKxC,YAAc+B,KAGjDgB,EAAkB,GAClBC,EAAkBH,EACbhD,EAAI,EAAGA,EAAI2C,EAAKS,YAAapD,IACpCkD,EAAgBd,KAAKjB,EAAmBgC,IACxB,eAAhB/C,EACI+C,IACCA,GAAoC,GAK3C,IAAK,IAAInD,EAAI,EAAGA,EAAIkD,EAAgBjD,OAAQD,IAAK,CAC/C,IAAIyC,EAAQJ,EAAYzB,EAAmBsC,EAAgBlD,KAC3D,IAAKyC,GAASA,EAAMP,SAElB,OADAe,GAAM,GACC,EAKS,eAAhB7C,EACF6C,EAAMC,EAAgBZ,MACpB,SAACe,GAAD,OACEA,EAAc,KAAOlC,EAAmB6B,GAAY,MAOxDC,IAFqB,IAFE9B,EAAmB6B,GACf,GACIhC,WAAW,GAAK,IACb2B,EAAKS,aACnB,GAEtB,GAAIH,EACF,OAAO,EAOT,IAFA,IAAIK,EAA4B,eAAhBlD,EAA+B,EAAI,GA3CI,WA6C9CJ,GAEP,IAAIuD,EAAetC,OAAO+B,GAAchD,EAAIsD,EACxCC,EAAe,KACjBA,GAA8B,KAEhC,IAAIvB,EAAWF,EAAKQ,MAAK,SAACkB,GAAD,OAAaA,EAAQjD,QAAUgD,KAGxDvB,EAASE,SAAWA,EACpBF,EAASG,UAAYnC,EACrB2C,EAAKc,SAXEzD,EAAI,EAAGA,EAAI2C,EAAKS,YAAapD,IAAM,EAAnCA,IAqETD,SAvIe,kBAAMD,GAwIrB4D,WA9BiB,WACjB,IAAK,IAAI1D,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,IAA0B,IAAtBF,EAAME,GAAG6C,SACX,OAAO,EAGX,OAAO,GAyBPR,cACAsB,QARc,kBAAM7B,GASpB8B,gBAxBsB,WACtB,IAAK,IAAI5D,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,IAAmC,IAA/BF,EAAME,GAAG6D,kBACX,OAAO,EAGX,OAAO,M,iBCjFXjC,EAAOC,QAxDM,SAAC3B,GACZ,IAEID,EAFA0C,EAAO,GACPmB,GAAU,EAGd,OAAQ5D,GACN,IAAK,UACHD,EAAS,EACT,MACF,IAAK,aACHA,EAAS,EACT,MACF,IAAK,YAGL,IAAK,YACHA,EAAS,EACT,MACF,IAAK,cACHA,EAAS,EAWb,IARA,IAQSD,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC/B,IAAI+D,EAAY,CACdxD,MAAOP,EACPiC,WAAW,GAEbU,EAAKP,KAAK2B,GAkBZ,MAAO,CAAE5D,QA/BO,kBAAMD,GA+BJkD,UA7BA,kBAAMnD,GA6BK+D,QA9Bb,kBAAMrB,GA8BgBC,IAf1B,SAAC5C,GACX2C,EAAK3C,GAAGiC,WAAY,GAcqBY,OAX5B,WACb,IAAIoB,EAAY,EAOhB,OANAtB,EAAKuB,SAAQ,SAACH,IACgB,IAAxBA,EAAU9B,WACZgC,OAGaA,IAAchE,GAIkB4D,gBA5B3B,kBAAMC,GA4BsCL,MA3BtD,WACZK,GAAU,M,iBCjBdlC,EAAOC,QAVQ,SAAC3B,GAOd,MAAO,CAAEC,QANO,kBAAMD,GAMJiE,OALH,SAACtE,EAAWsD,GAEzB,OADetD,EAAUc,cAAcwC,O,kICH9BiB,EACL,O,QC6BOC,EAzBG,SAACC,GACjB,IAAIC,EAAeD,EAAME,QAAUF,EAAME,QAAU,KAC/CC,EAAY,YACXF,IACHE,EAAYH,EAAM9B,UAAUN,SAAW,qBAAuB,aAJrC,MAMVwC,YAAQ,CACvBC,OAAQP,EACRQ,KAAM,kBAAMN,EAAMO,OAAOP,EAAM9B,UAAU3B,cACzCiE,QAAS,SAACC,GAAD,MAAU,CACjBC,SAAUD,EAAIC,aAJTJ,EANkB,oBAa3B,OACE,yBACEK,IAAMX,EAAME,QAAiB,KAAPI,EACtBM,IAAKZ,EAAM9B,UAAU3B,YACrB4D,UAAWA,EACXD,QAASD,EACTM,OAAQP,EAAMO,OACdM,GAAIb,EAAM9B,UAAUjC,SCHX6E,EAnBD,SAACd,GACb,IAAIe,EAAcf,EAAME,QAAU,qBAAuB,mBACnD1C,EAAOwC,EAAMgB,MAAMC,KAAI,SAAC/C,GAC5B,OACE,kBAAC,EAAD,CACE0C,IAAK1C,EAAU3B,YACf2B,UAAWA,EACXgC,QAASF,EAAME,QACfK,OAAQP,EAAMO,YAIpB,OACE,yBAAKM,GAAIE,EAAaZ,UAAU,uBAC7B3C,I,QCkCQH,EA7CF,SAAC2C,GAYZ,IAZsB,MAESkB,YAAQ,CACrCjD,KAAM,CACJkD,KAAMrB,EACNlC,SAAUoC,EAAM3B,KAAKxC,WAEvB2E,QAAS,SAACY,GAAD,MAAc,CACrBC,aAAcD,EAAQC,iBARJ,mBAEbA,EAFa,KAEbA,WAAcC,EAFD,KAWlBC,EAAa,GACR7F,EAAI,EAAGA,EAAIsE,EAAM3B,KAAKS,YAAapD,IAC1C6F,EAAWzD,KAAKpC,GAIlB,IAAM0C,EAAUmD,EAAWN,KAAI,SAAC9C,GAAD,OAC7B,yBACE0C,GAAIb,EAAM3B,KAAKxC,UAAYsC,EAC3ByC,IAAKZ,EAAM3B,KAAKxC,UAAYsC,EAC5BgC,UAAU,kBAGVqB,EAAYvE,yBAAe+C,EAAM3B,KAAKxC,WAAa,QAKvD,OAJA2F,EACwB,eAAtBxB,EAAMlE,YACF0F,EACAA,EAAY,aAAevE,yBAAe+C,EAAM3B,KAAKxC,WAEzD,yBAAKsE,UAAU,kBACb,yBACES,IAAKZ,EAAM3B,KAAKxC,UAChB4F,YAAazB,EAAME,QACnBC,UAAWqB,EACXb,IAAKW,EACLI,MAAO,CACLC,QAASN,EAAa,GAAM,IAG7BjD,K,gBClCHwD,EAAYxE,EAAQ,IACpByE,EAASzE,EAAQ,IAwNR0E,E,kDArNb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAED+B,MAAQ,CACXC,gBAAiBJ,IACjBK,kBAAmBL,IACnBM,aAAc,KACdC,YAAY,EACZvD,gBAAiB,KACjBwD,gBAAiB,aACjBC,YAAa,KACbxE,UAAW,MAEb,EAAKyE,QAAU,CAACT,EAAO,UAAWA,EAAO,aAbxB,E,iEAiBbU,KAAKR,MAAMI,YACTI,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,IAC3CC,KAAKC,SAASxF,+B,kCAMlB,IAAMgF,EAAkBO,KAAKR,MAAMC,gBAC7BC,EAAoBM,KAAKR,MAAME,kBACrC3G,4BAAkB2G,GAClBM,KAAKE,SAAS,CACZT,kBACAC,oBACAE,YAAY,EACZD,aAAcK,KAAKD,QAAQ,O,+BAItBzD,GACP,IAAItD,EAECA,EADLgH,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,GACxBC,KAAKR,MAAMC,gBACXO,KAAKR,MAAME,kBAE5B,IAAMS,EAAmBH,KAAKR,MAAMG,aAAarC,OAC/CtE,EACAsD,GAIF,IAAyB,IAArB6D,QAAmDC,IAArBD,EAAgC,CAChE,GAAIH,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,GAC3C,OAGA,IAAIrG,EAAQ4C,EAIZ,OAHA5C,EAAQ,GAAKA,IAAWA,EAAQ,OAChCsG,KAAKC,SAASvG,GAMa,OAA/ByG,EAAiB7E,UACb0E,KAAKK,SAASF,EAAiBzG,MAAO,OACtCsG,KAAKK,SAASF,EAAiBzG,MAAO,QAG3BsG,KAAKM,mBAIdN,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,GAC3CC,KAAKE,SAAS,CAAEP,aAAcK,KAAKD,QAAQ,KAE3CC,KAAKE,SAAS,CAAEP,aAAcK,KAAKD,QAAQ,Q,uCAU/C,GAHEC,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,GACrCC,KAAKR,MAAME,kBAAkB7C,aAC7BmD,KAAKR,MAAMC,gBAAgB5C,aAI/B,OAFAZ,QAAQC,IAAI8D,KAAKR,MAAMG,aAAarG,UAAY,SAChD0G,KAAKE,SAAS,CAAEN,YAAY,KACrB,I,mCAIEW,GACPP,KAAKR,MAAMI,YAAcI,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,IACpEC,KAAKC,SAASM,EAAEC,OAAOlC,M,+BAIlBkC,EAAQ5C,GACf,IAAM6C,EACJT,KAAKR,MAAMG,eAAiBK,KAAKD,QAAQ,GACrC,sBACA,oBACSW,SAASC,cAAcF,GAC/BG,WAAWlF,KAAK8E,GAAQK,UAAUC,IAAIlD,K,mCAI7C,IAAIiC,EAC6B,eAA/BG,KAAKR,MAAMK,gBAAmC,WAAa,aAC7DG,KAAKE,SAAS,CAAEL,sB,iCAGP7F,GAET,GAA2B,kBAAhBA,EAA0B,CAEnC,IAAMqB,EAAW2E,KAAKR,MAAMlE,UAAUjB,MAAM,GAAI,GAC1CiB,EAAY0E,KAAKR,MAAMlE,UAAU0E,KAAKR,MAAMlE,UAAUlC,OAAS,GAG/D2H,EAC2B,eAA/Bf,KAAKR,MAAMK,gBACP9F,6BAAmBC,GAAesB,EAClCvB,6BAAmBC,GAA2B,GAAZsB,EAGlCmE,EAAkBO,KAAKR,MAAMC,gBACnCA,EAAgB7F,UACdyB,EACA2E,KAAKR,MAAMK,gBACXkB,GAEFf,KAAKE,SAAS,CAAET,uB,iCAITc,GACTP,KAAKE,SAAS,CAAE5E,UAAWiF,EAAEC,OAAOlC,O,iCAG3BxC,GACT,IAAKA,EAAKkB,kBACR,OACE,kBAAC,EAAD,CACEW,QAASqC,KAAKgB,WAAWC,KAAKjB,MAC9BlE,KAAMA,EACNvC,YAAayG,KAAKR,MAAMK,oB,kCAO9BqB,OAAOC,SAASC,QAAO,K,+BAIvB,IACIC,EADAC,EAAUtB,KAAKR,MAAMI,WAAa,QAAU,YAE5C2B,EAAkB,GAClBvB,KAAKR,MAAMC,gBAAgB1C,oBAC7BsE,EAAKrB,KAAKR,MAAMI,WACZI,KAAKwB,UAAUP,KAAKjB,MACpBA,KAAKyB,UAAUR,KAAKjB,MACxBuB,EAAkB,UAGpB,IAAIV,EAAY,kBAKhB,OAJAA,EACiC,eAA/Bb,KAAKR,MAAMK,gBACPgB,EACAA,EAAY,YAEhB,kBAACa,EAAA,EAAD,CAAaC,QAASC,KACpB,yBAAKhE,UAAU,kBACb,0CACA,4BAAQD,QAAS0D,GAAKC,GACtB,yBAAK1D,UAAU,0BACb,sCACA,sCAEF,wBAAIA,UAAW2D,GAAf,cACA,yBAAK3D,UAAWiD,GACbb,KAAK6B,WAAW7B,KAAKR,MAAMC,gBAAgBvG,WAAW,IACtD8G,KAAK6B,WAAW7B,KAAKR,MAAMC,gBAAgBvG,WAAW,IACtD8G,KAAK6B,WAAW7B,KAAKR,MAAMC,gBAAgBvG,WAAW,IACtD8G,KAAK6B,WAAW7B,KAAKR,MAAMC,gBAAgBvG,WAAW,IACtD8G,KAAK6B,WAAW7B,KAAKR,MAAMC,gBAAgBvG,WAAW,KAEzD,yBAAK0E,UAAU,mBACb,kBAAC,EAAD,CACES,IAAI,kBACJI,MAAOuB,KAAKR,MAAMC,gBAAgB3C,UAClCkB,OAAQgC,KAAK8B,WAAWb,KAAKjB,QAG/B,kBAAC,EAAD,CACE3B,IAAI,oBACJI,MAAOuB,KAAKR,MAAME,kBAAkB5C,UACpCa,QAASqC,KAAK+B,aAAad,KAAKjB,SAGpC,4BACEpC,UAAW,eAAiB2D,EAC5B5D,QAASqC,KAAKgC,WAAWf,KAAKjB,OAFhC,c,GA1MSiC,IAAMC,WCHLC,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhH,QAAQgH,MAAMA,EAAM3B,c","file":"static/js/main.094941cd.chunk.js","sourcesContent":["const populateGameboard = (gameboard) => {\n  const ships = gameboard.getShips();\n  for (let i = 0; i < ships.length; i++) {\n    const name = ships[i].getName();\n    const orientation = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n    const index = Math.floor(Math.random() * 100);\n    const result = gameboard.placeShip(name, orientation, index);\n    if (result === false) {\n      i--;\n    }\n  }\n};\n\nconst sinkAllShips = (gameboard) => {\n  gameboard.receiveAttack(0);\n  gameboard.receiveAttack(1);\n  gameboard.receiveAttack(10);\n  gameboard.receiveAttack(11);\n  gameboard.receiveAttack(12);\n  gameboard.receiveAttack(20);\n  gameboard.receiveAttack(21);\n  gameboard.receiveAttack(22);\n  gameboard.receiveAttack(30);\n  gameboard.receiveAttack(31);\n  gameboard.receiveAttack(32);\n  gameboard.receiveAttack(33);\n  gameboard.receiveAttack(40);\n  gameboard.receiveAttack(41);\n  gameboard.receiveAttack(42);\n  gameboard.receiveAttack(43);\n  gameboard.receiveAttack(44);\n};\n\nconst coordinatesToIndex = (coordinates) => {\n  const letter = coordinates.charAt(0).toUpperCase();\n  const letterValue = (letter.charCodeAt(0) - 65) * 10;\n  const number = Number(coordinates.slice(1));\n  return letterValue + number - 1;\n};\n\nconst indexToCoordinates = (index) => {\n  const letter = String.fromCharCode(Math.floor(index / 10) + 65);\n  const number = (index % 10) + 1;\n  return letter + number;\n};\n\nconst getComputerPlay = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst formatShipName = (name) => {\n  //formats shipName to be added to a css class\n  return name.replace(\" \", \"-\").toLowerCase();\n};\n\nexport {\n  populateGameboard,\n  sinkAllShips,\n  getComputerPlay,\n  formatShipName,\n  coordinatesToIndex,\n  indexToCoordinates,\n};\n","const { indexToCoordinates, coordinatesToIndex } = require(\"../helpers\");\n\nconst Ship = require(\"./Ship\");\n\nconst Gameboard = () => {\n  let grid = [];\n\n  // Tracks ships\n  const ships = [\n    Ship(\"Carrier\"),\n    Ship(\"Battleship\"),\n    Ship(\"Destroyer\"),\n    Ship(\"Submarine\"),\n    Ship(\"Patrol Boat\"),\n  ];\n\n  const getShips = () => ships;\n\n  // Tracks the coordinates of it's grid\n  let index = 0;\n  for (let i = 65; i < 75; i++) {\n    //'i' is based on charcodes A (65) - J (74)\n    for (let n = 1; n < 11; n++) {\n      //this gives us coordinates like 'A5' and 'D1'\n      let gridItem = {\n        //starts with index 0\n        index: index,\n        coordinates: String.fromCharCode(i) + n,\n        hitStatus: false,\n        shipName: null,\n        shipIndex: null,\n      };\n      grid.push(gridItem);\n      index++;\n    }\n  }\n\n  const placeShip = (shipName, orientation, firstIndex) => {\n    //Validate ship placement\n    const ship = ships.find((ship) => ship.getName() === shipName);\n\n    //get all coordinates where ship should be placed\n    let shipCoordinates = [];\n    let coordinateIndex = firstIndex;\n    for (let i = 0; i < ship.getLength(); i++) {\n      shipCoordinates.push(indexToCoordinates(coordinateIndex));\n      orientation === \"horizontal\"\n        ? coordinateIndex++\n        : (coordinateIndex = coordinateIndex + 10);\n    }\n\n    //check if coordinates exist and/or already have a ship\n    let err;\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      let space = getGridItem(coordinatesToIndex(shipCoordinates[i]));\n      if (!space || space.shipName) {\n        err = true;\n        return false;\n      }\n    }\n\n    //can't place ships where there is not enough room on the board (no wrapping of ships)\n    if (orientation === \"horizontal\") {\n      err = shipCoordinates.find(\n        (theCoordinate) =>\n          theCoordinate[0] !== indexToCoordinates(firstIndex)[0]\n      );\n    } else {\n      let firstCoordinates = indexToCoordinates(firstIndex);\n      let row = firstCoordinates[0];\n      let distanceToWall = 10 - (row.charCodeAt(0) - 65);\n      let wiggleRoom = distanceToWall - ship.getLength();\n      err = wiggleRoom >= 0 ? false : true;\n    }\n    if (err) {\n      return false;\n    }\n\n    //place ship on grid items\n    // Increments index correctly for horizontal or vertical orientation\n    let increment = orientation === \"horizontal\" ? 1 : 10;\n\n    for (let i = 0; i < ship.getLength(); i++) {\n      // find gridItem\n      let currentIndex = Number(firstIndex) + i * increment;\n      if (currentIndex > 99) {\n        currentIndex = currentIndex - 100;\n      }\n      let gridItem = grid.find((theItem) => theItem.index === currentIndex);\n\n      // assign ship to gridName\n      gridItem.shipName = shipName;\n      gridItem.shipIndex = i;\n      ship.place();\n    }\n  };\n\n  // Track attacks\n  const receiveAttack = (index) => {\n    let gridSpace = grid.find((space) => space.index === Number(index));\n    if (gridSpace.hitStatus === true) {\n      return false;\n    } else {\n      gridSpace.hitStatus = true;\n\n      if (gridSpace.shipIndex !== null) {\n        // ship was hit()!\n        let theShip = ships.find(\n          (ship) => gridSpace.shipName === ship.getName()\n        );\n        theShip.hit(gridSpace.shipIndex);\n\n        //is ship sunk?\n        if (theShip.isSunk() === true) {\n          console.log(\"You sunk my \" + theShip.getName());\n        }\n      }\n\n      return gridSpace;\n    }\n  };\n\n  const areAllSunk = () => {\n    for (let i = 0; i < ships.length; i++) {\n      if (ships[i].isSunk() === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const allShipsOnBoard = () => {\n    for (let i = 0; i < ships.length; i++) {\n      if (ships[i].getPlacedStatus() === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  //this function is for testing only I think\n  const getGridItem = (index) => {\n    const gridItem = grid.find((item) => item.index === index);\n    return gridItem;\n  };\n\n  const getGrid = () => grid;\n\n  return {\n    receiveAttack,\n    placeShip,\n    getShips,\n    areAllSunk,\n    getGridItem,\n    getGrid,\n    allShipsOnBoard,\n  };\n};\n\nmodule.exports = Gameboard;\n","const Ship = (name) => {\n  let ship = [];\n  let onBoard = false;\n  let length;\n  // eslint-disable-next-line default-case\n  switch (name) {\n    case \"Carrier\":\n      length = 5;\n      break;\n    case \"Battleship\":\n      length = 4;\n      break;\n    case \"Destroyer\":\n      length = 3;\n      break;\n    case \"Submarine\":\n      length = 3;\n      break;\n    case \"Patrol Boat\":\n      length = 2;\n      break;\n  }\n  const getName = () => name;\n  const getShip = () => ship;\n  const getLength = () => length;\n  const getPlacedStatus = () => onBoard;\n  const place = () => {\n    onBoard = true;\n  };\n\n  for (let i = 0; i < length; i++) {\n    let shipSpace = {\n      index: i,\n      hitStatus: false,\n    };\n    ship.push(shipSpace);\n  }\n\n  const hit = (i) => {\n    ship[i].hitStatus = true;\n  };\n\n  const isSunk = () => {\n    let hitSpaces = 0;\n    ship.forEach((shipSpace) => {\n      if (shipSpace.hitStatus === true) {\n        hitSpaces++;\n      }\n    });\n    let sunkStatus = hitSpaces === length ? true : false;\n    return sunkStatus;\n  };\n\n  return { getName, getLength, getShip, hit, isSunk, getPlacedStatus, place };\n};\n\nmodule.exports = Ship;\n","const Player = (name) => {\n  const getName = () => name;\n  const attack = (gameboard, coordinateIndex) => {\n    const result = gameboard.receiveAttack(coordinateIndex);\n    return result;\n  };\n\n  return { getName, attack };\n};\n\nmodule.exports = Player;\n","export const ItemTypes = {\n  SHIP: \"ship\",\n};\n","import React from \"react\";\n\nimport { ItemTypes } from \"../constants\";\nimport { useDrop } from \"react-dnd\";\n\nconst GridSpace = (props) => {\n  let clickSetting = props.onClick ? props.onClick : null;\n  let className = \"gridspace\";\n  if (!clickSetting) {\n    className = props.gridSpace.shipName ? \"gridspace has-ship\" : \"gridspace\";\n  }\n  const [, drop] = useDrop({\n    accept: ItemTypes.SHIP,\n    drop: () => props.onDrop(props.gridSpace.coordinates),\n    collect: (mon) => ({\n      isOver: !!mon.isOver(),\n    }),\n  });\n  return (\n    <div\n      ref={!props.onClick ? drop : null}\n      key={props.gridSpace.coordinates}\n      className={className}\n      onClick={clickSetting}\n      onDrop={props.onDrop}\n      id={props.gridSpace.index}\n    />\n  );\n};\n\nexport default GridSpace;\n","import React from \"react\";\nimport GridSpace from \"./GridSpace\";\n\nconst Board = (props) => {\n  let containerId = props.onClick ? \"computer-container\" : \"player-container\";\n  const grid = props.board.map((gridSpace) => {\n    return (\n      <GridSpace\n        key={gridSpace.coordinates}\n        gridSpace={gridSpace}\n        onClick={props.onClick}\n        onDrop={props.onDrop}\n      />\n    );\n  });\n  return (\n    <div id={containerId} className=\"gameboard-container\">\n      {grid}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport { formatShipName } from \"../helpers\";\n\nimport { ItemTypes } from \"../constants\";\nimport { useDrag } from \"react-dnd\";\n\nconst Ship = (props) => {\n  //render shipSpaces inside of the ship\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.SHIP,\n      shipName: props.ship.getName(),\n    },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n  let shipSpaces = [];\n  for (let i = 0; i < props.ship.getLength(); i++) {\n    shipSpaces.push(i);\n  }\n\n  //construct ship out of ship Spaces\n  const theShip = shipSpaces.map((space) => (\n    <div\n      id={props.ship.getName() + space}\n      key={props.ship.getName() + space}\n      className=\"ship-space\"\n    />\n  ));\n  let classlist = formatShipName(props.ship.getName()) + \" ship\";\n  classlist =\n    props.orientation === \"horizontal\"\n      ? classlist\n      : classlist + \" vertical-\" + formatShipName(props.ship.getName());\n  return (\n    <div className=\"ship-container\">\n      <div\n        key={props.ship.getName()}\n        onMouseOver={props.onClick}\n        className={classlist}\n        ref={drag}\n        style={{\n          opacity: isDragging ? 0.5 : 1,\n        }}\n      >\n        {theShip}\n      </div>\n    </div>\n  );\n};\nexport default Ship;\n","import React from \"react\";\nimport {\n  populateGameboard,\n  getComputerPlay,\n  coordinatesToIndex,\n} from \"../helpers\";\nimport Board from \"./Board\";\nimport Ship from \"./Ship\";\n\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\n\nconst Gameboard = require(\"../factories/Gameboard\");\nconst Player = require(\"../factories/Player\");\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerGameboard: Gameboard(),\n      computerGameboard: Gameboard(),\n      activePlayer: null,\n      gameStatus: false,\n      shipCoordinates: null,\n      shipOrientation: \"horizontal\",\n      hoverSpaces: null,\n      shipIndex: null,\n    };\n    this.players = [Player(\"Player\"), Player(\"Computer\")];\n  }\n\n  componentDidUpdate() {\n    if (this.state.gameStatus) {\n      if (this.state.activePlayer === this.players[1]) {\n        this.playTurn(getComputerPlay());\n      }\n    }\n  }\n\n  setUpGame() {\n    const playerGameboard = this.state.playerGameboard;\n    const computerGameboard = this.state.computerGameboard;\n    populateGameboard(computerGameboard);\n    this.setState({\n      playerGameboard,\n      computerGameboard,\n      gameStatus: true,\n      activePlayer: this.players[0],\n    });\n  }\n\n  playTurn(coordinateIndex) {\n    let gameboard;\n    this.state.activePlayer !== this.players[0]\n      ? (gameboard = this.state.playerGameboard)\n      : (gameboard = this.state.computerGameboard);\n\n    const attackedGridItem = this.state.activePlayer.attack(\n      gameboard,\n      coordinateIndex\n    );\n\n    //check if this is a duplicate hit\n    if (attackedGridItem === false || attackedGridItem === undefined) {\n      if (this.state.activePlayer === this.players[0]) {\n        return;\n      } else {\n        //computer attacks closest available coordinates\n        let index = coordinateIndex;\n        index < 99 ? index++ : (index = 0);\n        this.playTurn(index);\n        //need to call return here so a second attackGridItem with index of 0 is not added to the callstack\n        return;\n      }\n    }\n    //add appropriate class to gridItem\n    attackedGridItem.shipIndex !== null\n      ? this.addClass(attackedGridItem.index, \"hit\")\n      : this.addClass(attackedGridItem.index, \"miss\");\n\n    //Check for winner\n    const winner = this.checkForWinner();\n\n    if (!winner) {\n      //turn over, switch player\n      if (this.state.activePlayer === this.players[0]) {\n        this.setState({ activePlayer: this.players[1] });\n      } else {\n        this.setState({ activePlayer: this.players[0] });\n      }\n    }\n  }\n\n  checkForWinner() {\n    const result =\n      this.state.activePlayer === this.players[0]\n        ? this.state.computerGameboard.areAllSunk()\n        : this.state.playerGameboard.areAllSunk();\n    if (result) {\n      console.log(this.state.activePlayer.getName() + \" won!\");\n      this.setState({ gameStatus: false });\n      return true;\n    }\n  }\n\n  handleAttack(e) {\n    if (this.state.gameStatus && this.state.activePlayer === this.players[0]) {\n      this.playTurn(e.target.id);\n    }\n  }\n\n  addClass(target, className) {\n    const parentID =\n      this.state.activePlayer === this.players[0]\n        ? \"#computer-container\"\n        : \"#player-container\";\n    const parent = document.querySelector(parentID);\n    parent.childNodes.item(target).classList.add(className);\n  }\n\n  handleFlip() {\n    let shipOrientation =\n      this.state.shipOrientation === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    this.setState({ shipOrientation });\n  }\n\n  handleDrop(coordinates) {\n    //ignores if event was passed\n    if (typeof coordinates === \"string\") {\n      //get Ship info\n      const shipName = this.state.shipIndex.slice(0, -1);\n      const shipIndex = this.state.shipIndex[this.state.shipIndex.length - 1];\n\n      //get first Space index\n      const firstSpaceIndex =\n        this.state.shipOrientation === \"horizontal\"\n          ? coordinatesToIndex(coordinates) - shipIndex\n          : coordinatesToIndex(coordinates) - shipIndex * 10;\n\n      //place ship\n      const playerGameboard = this.state.playerGameboard;\n      playerGameboard.placeShip(\n        shipName,\n        this.state.shipOrientation,\n        firstSpaceIndex\n      );\n      this.setState({ playerGameboard });\n    }\n  }\n\n  handleDrag(e) {\n    this.setState({ shipIndex: e.target.id });\n  }\n\n  renderShip(ship) {\n    if (!ship.getPlacedStatus()) {\n      return (\n        <Ship\n          onClick={this.handleDrag.bind(this)}\n          ship={ship}\n          orientation={this.state.shipOrientation}\n        />\n      );\n    }\n  }\n\n  resetGame() {\n    window.location.reload(false);\n  }\n\n  render() {\n    let message = this.state.gameStatus ? \"Reset\" : \"Play Game\";\n    let fn;\n    let hiddenClassName = \"\";\n    if (this.state.playerGameboard.allShipsOnBoard()) {\n      fn = this.state.gameStatus\n        ? this.resetGame.bind(this)\n        : this.setUpGame.bind(this);\n      hiddenClassName = \"hidden\";\n    }\n\n    let classList = \"ships-container\";\n    classList =\n      this.state.shipOrientation === \"horizontal\"\n        ? classList\n        : classList + \" vertical\";\n    return (\n      <DndProvider backend={Backend}>\n        <div className=\"game-container\">\n          <h1>Battleship</h1>\n          <button onClick={fn}>{message}</button>\n          <div className=\"player-label-container\">\n            <h2>Player</h2>\n            <h2>Enemy</h2>\n          </div>\n          <h3 className={hiddenClassName}>Your ships</h3>\n          <div className={classList}>\n            {this.renderShip(this.state.playerGameboard.getShips()[0])}\n            {this.renderShip(this.state.playerGameboard.getShips()[1])}\n            {this.renderShip(this.state.playerGameboard.getShips()[2])}\n            {this.renderShip(this.state.playerGameboard.getShips()[3])}\n            {this.renderShip(this.state.playerGameboard.getShips()[4])}\n          </div>\n          <div className=\"board-container\">\n            <Board\n              key=\"playerGameboard\"\n              board={this.state.playerGameboard.getGrid()}\n              onDrop={this.handleDrop.bind(this)}\n            />\n\n            <Board\n              key=\"computerGameboard\"\n              board={this.state.computerGameboard.getGrid()}\n              onClick={this.handleAttack.bind(this)}\n            />\n          </div>\n          <button\n            className={\"flip-button \" + hiddenClassName}\n            onClick={this.handleFlip.bind(this)}\n          >\n            Flip\n          </button>\n        </div>\n      </DndProvider>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport Game from \"./componenets/Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}